---
- hosts: "{{ cluster_master_dst | default('none') }}"
  become: true
  vars:
    bkpfile_src: "{{ dbname_src }}.sql.gz"
    bkpfile_dst: "{{ dbname_dst }}.sql.gz"
    bkpfile_globals_src: "{{ dbname_src }}.globals.sql.gz"
    bkpfile_globals_dst: "{{ dbname_dst }}.globals.sql.gz"
    fullbkpfile: "/tmp/{{ bkpfile_dst }}"
    fullbkpfile_globals: "/tmp/{{ bkpfile_globals_dst }}"
    artifactory_url: "https://artifactory.sbtech.com/artifactory/DataTeam/pgsql/cms_sync"
  tasks:

  - name: Validate input paramters
    assert:
      that:
        - dbname_src != ""
        - dbname_dst != ""

  - name: Check if database exists
    shell: psql -l|awk '{print $1}'|grep -w  {{ dbname_dst }}
    become_user: postgres
    register: postgres_database_exists
    ignore_errors: True

  - name: Display db existence
    debug:
      var: postgres_database_exists.stdout_lines

  - name: Make sure there is no backup file
    file:
      state: absent
      path: "{{ fullbkpfile }}"

  - name: Make sure there is no globals file
    file:
      state: absent
      path: "{{ fullbkpfile_globals }}"


# Download backup files from Artifactory

  - name: Download Backup from Artifactory
    shell:  wget  -q --no-check-certificate --user datateam.user --password KfdJDC3pySTZMy5P "{{ artifactory_url }}/{{ bkpfile_src }}" -O {{ fullbkpfile }}
    become_user: postgres
    register: postgres_database_download

  - name: Download Globals Backup from Artifactory
    shell:  wget  -q --no-check-certificate --user datateam.user --password KfdJDC3pySTZMy5P "{{ artifactory_url }}/{{ bkpfile_globals_src }}" -O {{ fullbkpfile_globals }}
    become_user: postgres
    register: postgres_database_globals_download



# Kill connections and DROP Database

  - name: Kill any connection to DB
    shell: psql -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid() AND datname='{{ dbname_dst }}';"
    become_user: postgres
    register: postgres_database_kill
    when: postgres_database_exists.stdout_lines | list | length > 0
    ignore_errors: True

  - name: Kill any connection to DB and DROP it
    shell: psql -c 'DROP DATABASE "{{ dbname_dst }}";'
    become_user: postgres
    register: postgres_database_drop
    when: postgres_database_exists.stdout_lines | list | length > 0
#    ignore_errors: True

  - name: Display db drop
    debug:
      var: postgres_database_drop.stdout_lines

# Create empty Database 

  - name: Create DB
    #shell: psql -c 'CREATE DATABASE "{{ dbname_dst }}" WITH OWNER = cms_migration ENCODING = "UTF8" CONNECTION LIMIT = -1;'
    shell: psql -c 'CREATE DATABASE "{{ dbname_dst }}" ENCODING = "UTF8" CONNECTION LIMIT = -1;'
    become_user: postgres
    register: postgres_database_create

  - name: Display db creation
    debug:
      var: postgres_database_create.stdout_lines


# Deal with USERS


  - name: Get Users related to DB  
    shell: gunzip < "{{ fullbkpfile_globals }}" | awk '( $3~/;$/) { print substr($3,1,length($3)-1) }'
    become_user: postgres
    register: postgres_database_users
    when: postgres_database_create.stdout_lines | list | length > 0 

  - name: Display db users
    debug:
      var: postgres_database_users.stdout_lines

  - name: Create users  
    shell: gunzip < "{{ fullbkpfile_globals }}" | psql 
    become_user: postgres
    register: postgres_database_users_restore
    when: postgres_database_create.stdout_lines | list | length > 0 

  - name: Display users restore 
    debug:
      var: postgres_database_users_restore.stdout_lines

  - name: Grant user access privileges to DB
    shell: psql -c 'GRANT CONNECT ON DATABASE "{{ dbname_dst }}" TO {{ item }};'
    become_user: postgres
    register: postgres_database_grant_permissions
    with_items:  "{{ postgres_database_users.stdout_lines }}"



# Deal with Database

  - name: Assign owner permissions to Database
    shell: psql -c 'ALTER DATABASE "{{ dbname_dst }}" OWNER TO cms_migration;'
    become_user: postgres
    register: postgres_database_grant_permissions
    when: postgres_database_create.stdout_lines | list | length > 0 
    ignore_errors: True


  - name: Restore Database 
    shell: gunzip < "{{ fullbkpfile }}" | psql --dbname={{ dbname_dst }}
    become_user: postgres
    register: postgres_database_restore
    when: postgres_database_create.stdout_lines | list | length > 0 

  - name: Display DB restore 
    debug:
      var: postgres_database_restore.stdout_lines


# Clean files 

  - name: Clean backup files
    file:
      state: absent
      path: "{{ fullbkpfile }}"

  - name: Clean globals file
    file:
      state: absent
      path: "{{ fullbkpfile_globals }}"

